TASK 1: What is HTTP(S)?
HyperText Transfer Protocol
- HTTP is the set of rules used for communicating with web servers for the transmitting of webpage data, whether that is HTML, Images, Videos, etc.
- by Tim Berners-Lee and his team (1989-1991)
HyperText Transfer Protocol Secure
- HTTPS is the secure version of HTTP. HTTPS data is encrypted so it not only stops people from seeing the data you are receiving and sending, but it also gives you assurances that you're talking to the correct web server and not something impersonating it.

a. What does HTTP stand for?
sol. Hyper Text Transfer Protocol

b. What does the S in HTTPS stand for?
sol. Secure

c. On the mock webpage on the right there is an issue, once you've found it, click on it. What is the challenge flag?
sol. THM{INVALID_HTTP_CERT}

TASK 2: Requests and responses
- When we access a website, your browser will need to make requests to a web server for assets such as HTML, Images, and download the responses.
- Before that, you need to tell the browser specifically how and where to access these resources, this is where URLs will help.
- Uniform Resource Locator
  -> A URL is predominantly an instruction on how to access a resource on the internet.
  -> http://user:password@tryhackme.com:80/view-room?id=1#task3
      
http://                   Scheme: This instructs on what protocol to use for accessing the resource such as HTTP, HTTPS, FTP (File Transfer Protocol).
user:password@            User: Some services require authentication to log in, you can put a username and password into the URL to log in.
tryhackme.com:            Host: The domain name or IP address of the server you wish to access.
80/                       Port: The Port that you are going to connect to, usually 80 for HTTP and 443 for HTTPS, but this can be hosted on any port between 1 - 65535.
view-room                 Path: The file name or location of the resource you are trying to access.
?id=1                     Query String: Extra bits of information that can be sent to the requested path. For example, /blog?id=1 would tell the blog path that you wish to receive the blog article with the id of 1.
#task3                    Fragment: This is a reference to a location on the actual page requested. This is commonly used for pages with long content and can have a certain part of the page directly linked to it, so it is viewable to the user as soon as they access the page.

Making request
- It's possible to make a request to a web server with just one line "GET / HTTP/1.1"
- But for a much richer web experience, you’ll need to send other data as well.
- This other data is sent in what is called headers, where headers contain extra information to give to the web server you’re communicating with
- eg.
REQUEST
            GET / HTTP/1.1
            Host: tryhackme.com
            User-Agent: Mozilla/5.0 Firefox/87.0
            Referer: https://tryhackme.com/
Line 1: This request is sending the GET method ( more on this in the HTTP Methods task ), request the home page with / and telling the web server we are using HTTP protocol version 1.1.
Line 2: We tell the web server we want the website tryhackme.com
Line 3: We tell the web server we are using the Firefox version 87 Browser
Line 4: We are telling the web server that the web page that referred us to this one is https://tryhackme.com
Line 5: HTTP requests always end with a blank line to inform the web server that the request has finished.

RESPONSE
HTTP/1.1 200 OK
Server: nginx/1.15.8
Date: Fri, 09 Apr 2021 13:34:03 GMT
Content-Type: text/html
Content-Length: 98

<html>
<head>
    <title>TryHackMe</title>
</head>
<body>
    Welcome To TryHackMe.com
</body>
</html>

Line 1: HTTP 1.1 is the version of the HTTP protocol the server is using and then followed by the HTTP Status Code in this case "200 Ok" which tells us the request has completed successfully.
Line 2: This tells us the web server software and version number.
Line 3: The current date, time and timezone of the web server.
Line 4: The Content-Type header tells the client what sort of information is going to be sent, such as HTML, images, videos, pdf, XML.
Line 5: Content-Length tells the client how long the response is, this way we can confirm no data is missing.
Line 6: HTTP response contains a blank line to confirm the end of the HTTP response.
Lines 7-14: The information that has been requested, in this instance the homepage.

a. What HTTP protocol is being used in the above example?
sol. HTTP/1.1

b. What response header tells the browser how much data to expect?
sol. Content-Length

TASK 3: HTTP Methods
- HTTP methods are a way for the client to show their intended action when making an HTTP request.
- There are a lot of HTTP methods but we'll cover the most common ones, although mostly you'll deal with the GET and POST method.
    -> GET Request - This is used for getting information from a web server.
    -> POST Request - This is used for submitting data to the web server and potentially creating new records
    -> PUT Request - This is used for submitting data to a web server to update information
    -> DELETE Request - This is used for deleting information/records from a web server.

a. What method would be used to create a new user account?
sol. POST

b. What method would be used to update your email address?
sol. PUT

c. What method would be used to remove a picture you've uploaded to your account?
sol. DELETE

d. What method would be used to view a news article?
sol. GET

TASK 4: HTTP Status Codes
