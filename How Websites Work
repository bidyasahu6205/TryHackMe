TASK 1: How websites work
- When you visit a website, your browser (like Safari or Google Chrome) makes a request to a web server asking for information about the page you're visiting. 
- It will respond with data that your browser uses to show you the page; a web server is just a dedicated computer somewhere else in the world that handles your requests.
- There are two major components that make up a website:
        i. Front End (Client-Side) - the way your browser renders a website.
        ii. Back End (Server-Side) - a server that processes your request and returns a response.

a. What term best describes the component of a web application rendered by your browser?
sol. Front End

TASK 2: HTML
- Websites are primarily created using:
        i. HTML, to build websites and define their structure
        ii. CSS, to make websites look pretty by adding styling options
        iii. JavaScript, implement complex features on pages using interactivity
- HyperText Markup Language (HTML) is the language websites are written in. Elements (also known as tags) are the building blocks of HTML pages and tells the browser how to display content.
- The code snippet below shows a simple HTML document, the structure of which is the same for every website:
The HTML structure (as shown in the screenshot) has the following components:
        <!DOCTYPE html>
        <html>
                <head> 
                        <title>Page Title</title>
                </head>
                <body>
                        <h1>Example Heading</h1> 
                        <p>Example paragraph..</p>
                </body>
        </html>
- <!DOCTYPE html> - defines that the page is a HTML5 document. This helps with standardisation across different browsers and tells the browser to use HTML5 to interpret the page.
- <html> - element is the root element of the HTML page - all other elements come after this element.
- <head> - element contains information about the page (such as the page title)
- <body> - element defines the HTML document's body; only content inside of the body is shown in the browser.
- <h1> - element defines a large heading
- <p> - element defines a paragraph

- There are many other elements (tags) used for different purposes.
- For example
        buttons (<button>), images (<img>), lists, and etc. 
- Tags can contain attributes such as the class attribute which can be used to style an element (e.g. make the tag a different color) <p class="bold-text">,
  or the src attribute which is used on images to specify the location of an image: <img src="img/cat.jpg">.
- An element can have multiple attributes each with its own unique purpose, e.g., <p attribute1="value1" attribute2="value2">.
- Elements can also have an id attribute (<p id="example">), which is unique to the element.
- Unlike the class attribute, where multiple elements can use the same class, an element must have different id's to identify them uniquely. Element id's are used for styling and to identify it by JavaScript.
- You can view the HTML of any website by right-clicking and selecting "View Page Source" (Chrome) / "Show Page Source" (Safari).

a. Let's play with some HTML! First click the "View Site" button inside this task. On the right-hand side, you should see a box that renders HTML - If you enter some HTML into the box and click the green "Render HTML Code" button, it will render your HTML on the page; you should see an image of some cats.
   One of the images on the cat website is broken - fix it, and the image will reveal the hidden text answer!
sol. HTMLHERO
________________________________________________________________________________________________________________________________
<!DOCTYPE html>
<html>
    <head>
        <title>TryHackMe HTML Editor</title>
    </head>
    <body>
        <h1>Cat Website!</h1>
        <p>See images of all my cats!</p>
        <img src='img/cat-1.jpg'>
        <img src='img/cat-2.'> <!--here we have to complete the path for it to get the picture-->
        <!-- Add dog image here -->
    </body>
</html>
________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________
<!DOCTYPE html>
<html>
    <head>
        <title>TryHackMe HTML Editor</title>
    </head>
    <body>
        <h1>Cat Website!</h1>
        <p>See images of all my cats!</p>
        <img src='img/cat-1.jpg'>
        <img src='img/cat-2.jpg'> 
        <!-- Add dog image here -->
    </body>
</html>
________________________________________________________________________________________________________________________________
Then you will get the cat picture with a text on it i.e HTMLHERO

b. Add a dog image to the page by adding another img tag (<img>) on line 11. The dog image location is img/dog-1.png. What is the text in the dog image?
sol. DOGHTML
html code after adding the dog picture
________________________________________________________________________________________________________________________________
<!DOCTYPE html>
<html>
    <head>
        <title>TryHackMe HTML Editor</title>
    </head>
    <body>
        <h1>Cat Website!</h1>
        <p>See images of all my cats!</p>
        <img src='img/cat-1.jpg'>
        <img src='img/cat-2.jpg'> <!--here we have to complete the path for it to get the picture-->
        <img src='img/dog-1.png'> <!-- Add dog image here -->
    </body>
</html>
________________________________________________________________________________________________________________________________
Then you will get the dog picture with a text on it i.e DOGHTML

TASK 3: JavaScript
- JavaScript is used to control the functionality of web pages - without JavaScript, a page would not have interactive elements and would always be static.
- JS can dynamically update the page in real-time, giving functionality to change the style of a button when a particular event on the page occurs (such as when a user clicks a button) or to display moving animations.
- JavaScript is added within the page source code and can be either loaded within <script> tags or can be included remotely with the src attribute: <script src="/location/of/javascript_file.js"></script>
- The following JavaScript code finds a HTML element on the page with the id of "demo" and changes the element's contents to "Hack the Planet" : document.getElementById("demo").innerHTML = "Hack the Planet";
- HTML elements can also have events, such as "onclick" or "onhover" that execute JavaScript when the event occurs.
- The following code changes the text of the element with the demo ID to Button Clicked:
        <button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'>Click Me!</button> 
  onclick events can also be defined inside the JavaScript script tags, and not on elements directly. 

a. Click the "View Site" button on this task. On the right-hand side, add JavaScript that changes the demo element's content to "Hack the Planet". Add the button HTML from this task that changes the element's text to "Button Clicked" on the editor on the right, update the code by clicking the "Render HTML+JS Code" button and then click the button.
sol. JSISFUN

<!DOCTYPE html>
<html>
    <head>
        <title>TryHackMe Editor</title>
    </head>
    <body>
        <div id="demo">Hi there!</div>
        <script type="text/javascript">
            // add your JavaScript here
             document.getElementById("demo").innerHTML = "Hack the Planet";
        </script>
        <button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'>Click Me!</button>
    </body>
</html>

TASK 4: Sensitive Data Exposure
- Sensitive Data Exposure occurs when a website doesn't properly protect (or remove) sensitive clear-text information to the end-user; 
- We now know that websites are built using many HTML elements (tags), all of which we can see simply by "viewing the page source".
- A website developer may have forgotten to remove login credentials, hidden links to private parts of the website or other sensitive data shown in HTML or JavaScript.
- Sensitive information can be potentially leveraged to further an attacker's access within different parts of a web application. 
- For example, there could be HTML comments with temporary login credentials, and if you viewed the page's source code and found this, you could use these credentials to log in elsewhere on the application (or worse, used to access other backend components of the site).

a. View the website on this link. What is the password hidden in the source code?
sol. testpasswd
ctrl+U 

<!DOCTYPE html>
<html>

<head>
    <title>How websites work</title>
    <link rel="stylesheet" href="css/style.css"></link>
</head>

<body>
    <div id='html-code-box'>
        <div id='html-bar'>
            <span id='html-url'>https://vulnerable-site.com</span>
        </div>
        <div class='theme' id='html-code'>
            <div class='logo-pos'><img src='img/logo_white.png'></div>
            <p id='login-msg'></p>
            <form method='post' id='form' autocomplete="off">
                <div class='form-field'>
                    <input class="input-text" type="text" name="username" placeholder="Username..">
                </div>
                <div class='form-field'>
                    <input class="input-text" type="password" name="password" placeholder="Password..">
                </div>
                <button onclick="login()" type='button' class='login'>Login</button>
                <!--
                    TODO: Remove test credentials!
                        Username: admin
                        Password: testpasswd
                -->
            </form>
            <div class="footer">Copyright Â© Vulnerable Website</div>
        </div>
    </div>
    <script src='js/script.js'></script>
</body>

</html>

TASK 5: HTML Injection
- HTML Injection is a vulnerability that occurs when unfiltered user input is displayed on the page.
- If a website fails to sanitise user input (filter any "malicious" text that a user inputs into a website), and that input is used on the page, an attacker can inject HTML code into a vulnerable website.
- When a user has control of how their input is displayed, they can submit HTML (or JavaScript) code, and the browser will use it on the page, allowing the user to control the page's appearance and functionality.
- To prevent malicious input, the website developer should sanitise everything the user enters before using it in the JavaScript function; in this case, the developer could remove any HTML tags.

a. View the website on this task and inject HTML so that a malicious link to http://hacker.com is shown.
sol. HTML_INJ3CTI0N
Input : <a href="http://hacker.com">link</a>
