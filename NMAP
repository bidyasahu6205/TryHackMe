TASK 2: Introduction
- When it comes to hacking, knowledge is power. The more knowledge you have about a target system or network, the more options you have available. This makes it imperative that proper enumeration is carried out before any exploitation attempts are made.
- Say we have been given an IP (or multiple IP addresses) to perform a security audit on. 
- Before we do anything else, we need to get an idea of the “landscape” we are attacking. What this means is that we need to establish which services are running on the targets. 
  -> eg.  perhaps one of them is running a webserver, and another is acting as a Windows Active Directory Domain Controller. 
- The first stage in establishing this “map” of the landscape is something called port scanning.
- When a computer runs a network service, it opens a networking construct called a “port” to receive the connection.
- Ports are necessary for making multiple network requests or having multiple services available. 
  -> eg1. when you load several webpages at once in a web browser, the program must have some way of determining which tab is loading which web page.This is done by establishing connections to the remote webservers using different ports on your local machine. 
  -> eg2. if you want a server to be able to run more than one service (for example, perhaps you want your webserver to run both HTTP and HTTPS versions of the site), then you need some way to direct the traffic to the appropriate service.
     Once again, ports are the solution to this. Network connections are made between two ports – an open port listening on the server and a randomly selected port on your own computer.
  -> For example, when you connect to a web page, your computer may open port 49534 to connect to the server’s port 443.
- Every computer has 65,535 available ports, many of which are reserved for standard services. For example:
  -> HTTP services use port 80.
  -> HTTPS services use port 443.
	-> Windows NETBIOS uses port 139.
	-> SMB uses port 445.
- In Capture the Flag (CTF) competitions or real-world scenarios, these standard ports may be altered. Therefore, it is crucial to perform proper enumeration to identify which ports are open and in use.
- A port scan, typically conducted with nmap, is essential to determine which ports a server has open. Nmap connects to each port of the target and classifies them as:
	-> Open (responding)
	-> Closed (non-responding)
	-> Filtered (usually blocked by a firewall)
- Once the open ports are identified, services running on these ports can be enumerated manually or by using nmap.
- Nmap is the industry-standard tool for port scanning due to its versatility and functionality. Its scripting engine allows for vulnerability scanning and, in some cases, direct exploitation.
- Understanding port scanning, its necessity, and nmap's role is fundamental for successful initial enumeration and potential attack strategies.

a. What networking constructs are used to direct traffic to the right application on a server?
sol. Ports

b. How many of these are available on any network-enabled computer?
sol. 65535

c. [Research] How many of these are considered "well-known"? (These are the "standard" numbers mentioned in the task)
sol. 1024

TASK 3:	NMAP Switch
- Nmap can be accessed by typing nmap into the terminal command line,  followed by some of the "switches" (command arguments which tell a program to do different things)
- To know all the switches available use the following commands.
	-> nmap -h
	-> man nmap

a. What is the first switch listed in the help menu for a 'Syn Scan' (more on this later!)?
sol. -sS

b. Which switch would you use for a "UDP scan"?
sol. -sU

c.If you wanted to detect which operating system the target is running on, which switch would you use?
sol. -O

d. Nmap provides a switch to detect the version of the services running on the target. What is this switch?
sol. -sV

e. The default output provided by nmap often does not provide enough information for a pentester. How would you increase the verbosity?
sol. -v

f. Verbosity level one is good, but verbosity level two is better! How would you set the verbosity level to two?
(Note: it's highly advisable to always use at least this option)
sol. -vv

g. We should always save the output of our scans -- this means that we only need to run the scan once (reducing network traffic and thus chance of detection), and gives us a reference to use when writing reports for clients.
What switch would you use to save the nmap results in three major formats?
sol. -oA

h. What switch would you use to save the nmap results in a "normal" format?
sol. -oN

i. A very useful output format: how would you save results in a "grepable" format?
sol. -oG

j. Sometimes the results we're getting just aren't enough. If we don't care about how loud we are, we can enable "aggressive" mode. This is a shorthand switch that activates service detection, operating system detection, a traceroute and common script scanning.
How would you activate this setting?
sol. -A

k. Nmap offers five levels of "timing" template. These are essentially used to increase the speed your scan runs at. Be careful though: higher speeds are noisier, and can incur errors!
How would you set the timing template to level 5?
sol. -T5

l. We can also choose which port(s) to scan.
How would you tell nmap to only scan port 80?
sol. -p 80

m. How would you tell nmap to scan ports 1000-1500?
sol. -p 1000-1500

n. A very useful option that should not be ignored:
How would you tell nmap to scan all ports?
sol. -p-

o. How would you activate a script from the nmap scripting library (lots more on this later!)?
sol. --script

p. How would you activate all of the scripts in the "vuln" category?
sol. --script=vuln

TASK 4 : Overview
When port scanning with Nmap, there are three basic scan types. These are:

TCP Connect Scans (-sT)
SYN "Half-open" Scans (-sS)
UDP Scans (-sU)
Additionally there are several less common port scan types, some of which we will also cover (albeit in less detail). These are:

TCP Null Scans (-sN)
TCP FIN Scans (-sF)
TCP Xmas Scans (-sX)

TASK 5: TCP Connect Scan
- The three-way handshake consists of three stages.
syn	-> First the connecting terminal (our attacking machine, in this instance) sends a TCP request to the target server with the SYN flag set.
syn/ack	-> The server then acknowledges this packet with a TCP response containing the SYN flag, as well as the ACK flag. 
ack	-> Finally, our terminal completes the handshake by sending a TCP request with the ACK flag set.

- 

TASK 6 
SYN SCANS (-sS)
- SYN scans are used to scan the TCP port-range of a target or targets.
- sometimes referred to as "Half-open" scans, or "Stealth" scans.
- SYN scans sends back a RST TCP packet after receiving a SYN/ACK from the server (this prevents the server from repeatedly trying to make the request). 
- Advantages for us as hackers:
  > It can be used to bypass older Intrusion Detection systems as they are looking out for a full three way handshake. This is often no longer the case with modern IDS solutions; it is for this reason that SYN scans are still frequently referred to as "stealth" scans.
  > SYN scans are often not logged by applications listening on open ports, as standard practice is to log a connection once it's been fully established. Again, this plays into the idea of SYN scans being stealthy.
  > Without having to bother about completing (and disconnecting from) a three-way handshake for every port, SYN scans are significantly faster than a standard TCP Connect scan.
- Disadvantages
  > Require sudo permissions[1] in order to work correctly in Linux because SYN scans require the ability to create raw packets (as opposed to the full TCP handshake), which is a privilege only the root user has by default. 
  > Unstable services are sometimes brought down by SYN scans, which could prove problematic if a client has provided a production environment for the test.
- SYN scans are the default scans used by Nmap if run with sudo permissions.
- If a port is closed then the server responds with a RST TCP packet. 
- . If the port is filtered by a firewall then the TCP SYN packet is either dropped, or spoofed with a TCP reset.

a. There are two other names for a SYN scan, what are they?
sol. Half-Open, Stealth

b. Can Nmap use a SYN scan without Sudo permissions (Y/N)?
sol. N

TASK 7
UDP Scans (-sU )
- UDP connections are stateless. This means that, rather than initiating a connection with a back-and-forth "handshake", UDP connections rely on sending packets to a target port and essentially hoping that they make it.
- This makes UDP superb for connections which rely on speed over quality (e.g. video sharing)
- but the lack of acknowledgement makes UDP significantly more difficult (and much slower) to scan.
- When a packet is sent to an open UDP port, there should be no response. When this happens, Nmap refers to the port as being open|filtered
- If it gets a UDP response (which is very unusual), then the port is marked as open.
- When a packet is sent to a closed UDP port, the target should respond with an ICMP (ping) packet containing a message that the port is unreachable. This clearly identifies closed ports, which Nmap marks as such and moves on.
- Due to difficulty in identifying open ports udp scan is icredibly slow which is why we use --top-ports <n> to check only n numbers of ports 
- Usually empty UDP packets are sent to most ports. For protocol-specific payloads for well-known services. Examples: DNS (53), SNMP (161), NTP (123).
	-> No response = open|filtered.
	-> ICMP Port Unreachable = closed.
	-> Protocol response = open

a. If a UDP port doesn't respond to an Nmap scan, what will it be marked as?
sol. open|filtered

b. When a UDP port is closed, by convention the target should send back a "port unreachable" message. Which protocol would it use to do so?
sol. ICMP

TASK 8: NULL, FIN and Xmas
- All three are interlinked and are used primarily as they tend to be even stealthier
- NULL scan (-sN)
	-> The TCP request is sent with no flags set at all. 
	-> As per the RFC, the target host should respond with a RST if the port is closed.
####	NOTE	####
A Request for Comments (RFC) is a publication in a series from the principal technical development and standards-setting bodies for the Internet, most prominently the Internet Engineering Task Force (IETF).
####	 -x-	####
- FIN scan (-sF) 
	-> Request is sent with the FIN flag (usually used to gracefully close an active connection). Once again, Nmap expects a RST if the port is closed.
- Xmas scan (-sX) 
	-> send a malformed TCP packet and expects a RST response for closed ports. 
	->  It's referred to as an xmas scan as the flags that it sets (PSH, URG and FIN) give it the appearance of a blinking christmas tree when viewed as a packet capture in Wireshark.
- The expected response for open ports with these scans is also identical, and is very similar to that of a UDP scan.
- If the port is open then there is no response to the malformed packet.
- Unfortunately (as with open UDP ports), that is also an expected behaviour if the port is protected by a firewall, so NULL, FIN and Xmas scans will only ever identify ports as being open|filtered, closed, or filtered.
- If a port is identified as filtered then it is usually because the target has responded with an ICMP unreachable packet.
- while RFC 793 mandates that network hosts respond to malformed packets with a RST TCP packet for closed ports, and don't respond at all for open ports; But not necessary.
- In particular Microsoft Windows (and a lot of Cisco network devices) are known to respond with a RST to any malformed TCP packet -- regardless of whether the port is actually open or not. This results in all ports showing up as being closed.
- We use this scan for firewall evasion. Many firewalls are configured to drop incoming TCP packets to blocked ports which have SYN flag set (thus blocking new connection initiation requests).
  By sending requests which do not contain the SYN flag, we effectively bypass this kind of firewall.
- But due modern IDS solutions, they are not 100% effective.

a. Which of the three shown scan types uses the URG flag?
sol. xmas

b. Why are NULL, FIN and Xmas scans generally used?
sol. Firewall Evasion

c. Which common OS may respond to a NULL, FIN or Xmas scan with a RST for every port?
sol. Microsoft Windows

TASK 9: ICMP Network Scanning
Ping sweep (-sn)
- On first connection to a target network in a black box assignment, our first objective is to obtain a "map" of the network structure -- or, in other words, we want to see which IP addresses contain active hosts, and which do not.
- One way to do this is by using Nmap to perform a so called "ping sweep". 
- Nmap sends an ICMP packet to each possible IP address for the specified network.
- When it receives a response, it marks the IP address that responded as being alive. This is not always accurate; however, it can provide something of a baseline and thus is worth covering.
- Syntax : nmap -sn ipaddress 
	ipaddress eg: 192.168.0.1-254 or 192.168.0.0/24
- The -sn switch tells Nmap not to scan any ports -- forcing it to rely primarily on ICMP echo packets (or ARP requests on a local network, if run with sudo or directly as the root user) to identify targets.
- In addition to the ICMP echo requests, the -sn switch will also cause nmap to send a TCP SYN packet to port 443 of the target, as well as a TCP ACK (or TCP SYN if not run as root) packet to port 80 of the target.

a. How would you perform a ping sweep on the 172.16.x.x network (Netmask: 255.255.0.0) using Nmap? (CIDR notation)
sol. nmap -sn 172.16.0.0/16

TASK 10: Overview
- The Nmap Scripting Engine (NSE) is an incredibly powerful addition to Nmap.
- NSE Scripts are written in the Lua programming language, and can be used to do a variety of things.
	-> scanning for vulnerabilities
	-> automating exploits for them
	-> reconnaisance
- There are many categories available. Some useful categories include:
	-> safe:- Won't affect the target
	-> intrusive:- Not safe: likely to affect the target
	-> vuln:- Scan for vulnerabilities
	-> exploit:- Attempt to exploit a vulnerability
	-> auth:- Attempt to bypass authentication for running services (e.g. Log into an FTP server anonymously)
	-> brute:- Attempt to bruteforce credentials for running services
	-> discovery:- Attempt to query running services for further information about the network (e.g. query an SNMP server).
- for more list refer : https://nmap.org/book/nse-usage.html

a. What language are NSE scripts written in?
sol. Lua

b. Which category of scripts would be a very bad idea to run in a production environment?
sol. intrusive

TASK 11 : Working with NSE
- To run a specific script, we would use --script=<script-name>
	e.g: --script=http-fileupload-exploiter
- Multiple scripts can be run simultaneously in this fashion by separating them by a comma.
	e.g: --script=smb-enum-users,smb-enum-shares.
- Some scripts require arguments (for example, credentials, if they're exploiting an authenticated vulnerability). These can be given with the --script-args Nmap switch.
- An example of this would be with the http-put script (used to upload files using the PUT method). This takes two arguments: the URL to upload the file to, and the file's location on disk.  For example:
	nmap -p 80 --script http-put --script-args http-put.url='/dav/shell.php',http-put.file='./shell.php'
- Note that the arguments are separated by commas, and connected to the corresponding script with periods (i.e.  <script-name>.<argument>).
- full list of scripts and their argument can be refered from : https://nmap.org/nsedoc/
- Nmap scripts come with built-in help menus, which can be accessed using nmap --script-help <script-name>

a. What optional argument can the ftp-anon.nse script take?
sol. maxlist

TASK 12: Searching for scripts
- Way to find nmap Scripts:
	i. the page on the Nmap website ( https://nmap.org/nsedoc/ ) which contains a list of all official scripts.
	ii. the local storage,  Nmap stores its scripts on Linux at /usr/share/nmap/scripts.
		All of the NSE scripts are stored in this directory by default -- this is where Nmap looks for scripts when you specify them.
		e.g:  ls -l /usr/share/nmap/scripts/*ftp*
	iii. One is by using the /usr/share/nmap/scripts/script.db file
		Nmap uses this file to keep track of (and utilise) scripts for the scripting engine; however, we can also grep through it to look for scripts. 
		e.g: grep "ftp" /usr/share/nmap/scripts/script.db
- Installing New Scripts
	-> the Nmap website contains a list of scripts, so, what happens if one of these is missing in the scripts directory locally?
	-> " sudo apt update && sudo apt install nmap " should fix this
	-> it's also possible to install the scripts manually by downloading the script from Nmap
	-> Syntax: sudo wget -O /usr/share/nmap/scripts/<script-name>.nse https://svn.nmap.org/nmap/scripts/<script-name>.nse

a. Search for "smb" scripts in the /usr/share/nmap/scripts/ directory using either of the demonstrated methods.
What is the filename of the script which determines the underlying OS of the SMB server?
sol. smb-os-discovery.nse

b. Read through this script. What does it depend on?
sol. smb-brute

TASK 13: Firewall Evasion
- Your typical Windows host will, with its default firewall, block all ICMP packets.
- This presents a problem: not only do we often use ping to manually establish the activity of a target, Nmap does the same thing by default. 
- This means that Nmap will register a host with this firewall configuration as dead and not bother scanning it at all.
- So, we need a way to get around this configuration. Fortunately Nmap provides an option for this: -Pn
- which tells Nmap to not bother pinging the host before scanning it. This means that Nmap will always treat the target host(s) as being alive, effectively bypassing the ICMP block
- however, it comes at the price of potentially taking a very long time to complete the scan (if the host really is dead then Nmap will still be checking and double checking every specified port).
- There are a variety of other switches which Nmap considers useful for firewall evasion
- We will not go through these in detail, however, they can be found : https://nmap.org/book/man-bypass-firewalls-ids.html
	-> -f:- Used to fragment the packets (i.e. split them into smaller pieces) making it less likely that the packets will be detected by a firewall or IDS.
	-> An alternative to -f, but providing more control over the size of the packets: --mtu <number>, accepts a maximum transmission unit size to use for the packets sent. This must be a multiple of 8.
	-> --scan-delay <time>ms:- used to add a delay between packets sent. This is very useful if the network is unstable, but also for evading any time-based firewall/IDS triggers which may be in place.
	-> --badsum:- this is used to generate in invalid checksum for packets. Any real TCP/IP stack would drop this packet, however, firewalls may potentially respond automatically,
	without bothering to check the checksum of the packet. As such, this switch can be used to determine the presence of a firewall/IDS.

a. Which simple (and frequently relied upon) protocol is often blocked, requiring the use of the -Pn switch?
sol. ICMP

b. [Research] Which Nmap switch allows you to append an arbitrary length of random data to the end of packets?
sol. --data-length

TASK 14: 
Does the target ip respond to ICMP echo (ping) requests (Y/N)?

N
Correct Answer
Perform an Xmas scan on the first 999 ports of the target -- how many ports are shown to be open or filtered?

999
Correct Answer
There is a reason given for this -- what is it?

Note: The answer will be in your scan results. Think carefully about which switches to use -- and read the hint before asking for help!

No Response
Correct Answer
Hint
Perform a TCP SYN scan on the first 5000 ports of the target -- how many ports are shown to be open?

5
Correct Answer
Open Wireshark (see Cryillic's Wireshark Room for instructions) and perform a TCP Connect scan against port 80 on the target, monitoring the results. Make sure you understand what's going on. Deploy the ftp-anon script against the box. Can Nmap login successfully to the FTP server on port 21? (Y/N)

Y
